#pragma config(Sensor, S1,     ult,            sensorEV3_Ultrasonic)
#pragma config(Sensor, S2,     cor,            sensorEV3_Color, modeEV3Color_Color)
#pragma config(Sensor, S3,     giro,           sensorEV3_Gyro, modeEV3Gyro_RateAndAngle)
#pragma config(Sensor, S4,     giro,           sensorNone)
#pragma config(Motor,  motorA,          dir,           tmotorEV3_Large, PIDControl, encoder)
#pragma config(Motor,  motorB,          esq,           tmotorEV3_Large, PIDControl, encoder)
#pragma config(Motor,  motorC,          cancela,       tmotorEV3_Medium, PIDControl, encoder)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

/* Definição de estados */
#define RETO 			1
#define INTERSECCAO		2
#define CAPTURAR		3
#define RAMPA_IDA		4
#define PLAZA			5
#define RAMPA_VOLTA		6

/* Outras definições */
#define DIST_BONECO	30
#define DIST_ANDAR 30
#define TAM 6
#define POTENCIA 25 // 30
#define POTENCIA_GIRO 10
#define FRENTE 1
#define TRAS -1
#define ANTIHORARIO -1 //ESQUERDA
#define HORARIO 1 //DIREITA
#define DESLIGA 0

/*variaveis para funcao cancela*/
#define pos_abrir 140
#define vel_abrir 10
#define pos_fechar 0
#define vel_fechar 5
//int bonecos_total = 0;

/*Funcao andar reto
** Param: sentido
*/
void AndarReto (int sentido){
	setMotorSync(dir,esq,0,sentido*POTENCIA);
}

/*Funcao girar robo
** Param: angulo, sentido
*/
void GirarRobo(int degree, int sentido){
//Direita Angulo Negativo - angulo diminou se for para direita
//Esquerda Angulo Positivo = angulo aumenta se for para esquerda

	//SET GIRO
	AndarReto(DESLIGA);
	
	//Verificar Angulo
	if(degree == 90){
		degree = degree - 10;
	}else if(degree == 180){
		displayTextLine(1,"ANGULO 180");
		degree = degree - 5;
	}

	if(degree == 0 && sentido == FRENTE){
		AndarReto(FRENTE);
	}
	
	resetGyro(S3);
	delay(1500);
	
	 repeatUntil(abs(getGyroDegrees(S3)) > degree){
	   if(sentido == HORARIO){ //Gira para direita
		   	displayTextLine(3,"girando sentido horario");
			  setMotorSpeed(esq, FRENTE*POTENCIA_GIRO);
			  setMotorSpeed(dir, TRAS*POTENCIA_GIRO);
			  //delay(2000);
		}else{
			displayTextLine(3,"girando sentido antihorario");
		  setMotorSpeed(esq, TRAS*POTENCIA_GIRO);
		  setMotorSpeed(dir, FRENTE*POTENCIA_GIRO);
		  //delay(2000);
		}
	}

	 //Stop the motors at the end of the turn
	 setMotorSpeed(esq, DESLIGA);
	 setMotorSpeed(dir, DESLIGA);
	 delay(1500);
	 resetGyro(S3);
	 delay(1500);
}


task main(){
resetGyro(S3);
delay(1500);

	while(true){

		displayTextLine(1,"estou aqui -- 0");
		GirarRobo(90,ANTIHORARIO);

		displayTextLine(1,"estou aqui -- 1");
		GirarRobo(180,HORARIO);

	}


}
